homeassistant:
  # Name of the location where Home Assistant is running
  name: Pi1
  # Location required to calculate the time the sun rises and sets
  latitude: !secret latitude
  longitude: !secret longitude
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: 161
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: Europe/Amsterdam


http:
  # Uncomment this to add a password (recommended!)
  api_password: !secret api_password
  # use_x_forwarded_for: True
  # Uncomment this if you are using SSL or running in Docker etc
  # base_url: example.duckdns.org:8123

frontend:

# Checks for available updates
# Note: This component will send some information about your system to
# the developers to assist with development of Home Assistant.
# For more information, please see:
# https://home-assistant.io/blog/2016/10/25/explaining-the-updater/
#updater:
  # Optional, allows Home Assistant developers to focus on popular components.
  # include_used_components: true

# Discover some devices automatically
discovery:

# Allows you to issue voice commands from the frontend in enabled browsers
#conversation:

# Enables support for tracking state changes over time.
#history:

# View all events in a logbook
#logbook:

# Track the sun
#sun:

# Weather Prediction
#sensor:
#  platform: yr


binary_sensor:
    - id: frontdoor
      platform: rpi_gpio
      ports:
        25: frontdoor
      pull_mode: DOWN
      invert_logic: true
      bouncetime: 60
      device_class: opening
    - id: doorbell
      platform: rpi_gpio
      ports:
        18: doorbell
      pull_mode: DOWN
      invert_logic: false
      bouncetime: 60


switch:
  - platform: command_line
    switches:
        tv_spots:
            command_on: /home/homeautomation/43392/433send -g beneden -d 16 -s 1
            command_off: /home/homeautomation/43392/433send -g beneden -d 16 -s 0
        front_room:
            command_on: /home/homeautomation/43392/lights/kaku M 10 on
            command_off: /home/homeautomation/43392/lights/kaku M 10 off
        hall:
            command_on: /home/homeautomation/43392/433send -g boven -d 2 -s 1
            command_off: /home/homeautomation/43392/433send -g boven -d 2 -s 0
  - platform: template
    switches:
        avr:
            value_template: "{{ states.input_boolean.avr }}"
            turn_on:
                service: shell_command.irsend
                data:
                    device: "avr"
                    key: "KEY_POWER"
            turn_off:
                service: shell_command.irsend
                data:
                    device: "avr"
                    key: "KEY_POWER"
        tvdecoder:
            value_template: "{{ states.input_boolean.tvdecoder }}"
            turn_on:
                - service: shell_command.irsend
                  data:
                     device: "VIP1853"
                     key: "POWER"
                - service: shell_command.irsend
                  data:
                    device: "avr"
                    key: "KEY_TV"
            turn_off:
                service: shell_command.irsend
                data:
                    device: "VIP1853"
                    key: "POWER"


#Hidden states for stateless switches
input_boolean:
    avr:
        initial: off
    tvdecoder:
        initial: off



######### SENSOR PROPAGATION SLAVE->MASTER (MQTT) #########
automation:
  - id: s2m_frontdoor
    hide_entity: true
    trigger:
        - platform: state
          entity_id: binary_sensor.frontdoor
        - platform: homeassistant
          event: start
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data:
            topic: "home/binary_sensor/frontdoor"
            payload_template: "{{ states('binary_sensor.frontdoor') | upper }}"
  - id: doorbell
    hide_entity: true
    trigger:
        - platform: state
          entity_id: binary_sensor.doorbell
        - platform: homeassistant
          event: start
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data:
            topic: "home/binary_sensor/doorbell"
            payload_template: "{{ states('binary_sensor.doorbell') | upper }}"
######### SWITCH PROPAGATION SLAVE->MASTER and MASTER->SLAVE (MQTT) #########
  - id: s2m_tv_spots
    alias: Slave-to-Master TV Spots
    hide_entity: true
    trigger:
      - platform: state
        entity_id: switch.tv_spots
      - platform: mqtt
        topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
       service: mqtt.publish
       data:
           topic: "home/switch/tv_spots"
           payload_template: "{{ states('switch.tv_spots') | upper }}"
  - id: m2s_tv_spots
    alias: Master-to-Slave TV Spots
    hide_entity: true
    trigger:
       platform: mqtt
       topic: "home/switch/tv_spots"
    action:
       service_template: switch.turn_{{ trigger.payload | string | lower }}
       entity_id: switch.tv_spots
  - id: s2m_front_room
    hide_entity: true
    trigger:
        - platform: state
          entity_id: switch.front_room
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data:
            topic: "home/switch/front_room"
            payload_template: "{{ states('switch.front_room') | upper }}"

  - id: m2s_front_room
    hide_entity: true
    trigger:
       platform: mqtt
       topic: "home/switch/front_room"
    action:
       service_template: switch.turn_{{ trigger.payload | string | lower }}
       entity_id: switch.front_room

  - id: s2m_hall
    hide_entity: true
    trigger:
        - platform: state
          entity_id: switch.hall
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data:
            topic: "home/switch/hall"
            payload_template: "{{ states('switch.hall') | upper }}"

  - id: m2s_hall
    hide_entity: true
    trigger:
       platform: mqtt
       topic: "home/switch/hall"
    action:
       service_template: switch.turn_{{ trigger.payload | string | lower }}
       entity_id: switch.hall

  - id: s2m_avr
    hide_entity: true
    trigger:
       - platform: state
         entity_id: switch.avr
       - platform: mqtt
         topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
       service: mqtt.publish
       data:
          topic: "home/switch/avr"
          payload_template: "{{ states('switch.avr') | upper }}"

  - id: s2m_avr
    hide_entity: true
    trigger:
       platform: mqtt
       topic: "home/switch/avr"
    action:
       service_template: switch.turn_{{ trigger.payload | string | lower }}
       entity_id: switch.avr
  - id: s2m_tvdecoder
    alias: Slave-to-Master TV Decoder
    hide_entity: true
    trigger:
       - platform: state
         entity_id: switch.tvdecoder
       - platform: mqtt
         topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
       service: mqtt.publish
       data:
           topic: "home/switch/tvdecoder"
           payload_template: "{{ states('switch.tvdecoder') | upper }}"

  - id: m2s_tvdecoder
    alias: Master-to-Slave TV Decoder
    hide_entity: true
    trigger:
       platform: mqtt
       topic: "home/switch/tvdecoder"
    action:
       service_template: switch.turn_{{ trigger.payload | string | lower }}
       entity_id: switch.tvdecoder

  - id: startup
    alias: Startup
    hide_entity: true
    trigger:
       platform: homeassistant
       event: start
    action:
       service: shell_command.start_pycec

  - id: irsend
    alias: IR Send
    trigger:
        platform: mqtt
        topic: "home/irsend/pi1"
    action:
        service: shell_command.irsend
        data:
            device: trigger.payload_json.device
            key: trigger.payload_json.key

shell_command:
    start_pycec: python -m pycec
    irsend: 'irsend SEND_ONCE "{{ device }}" "{{ key }}" 2> /tmp/err'




#MQTT
mqtt:
    broker: 192.168.0.1
    port: 1883
    client_id: pi1
    keepalive: 60
    username: homeassistant
    password: !secret api_password

#mqtt_eventstream:
#  publish_topic: slaves/pi1
#  subscribe_topic: master
