homeassistant:
  # Name of the location where Home Assistant is running
  name: Pi1
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: Europe/Amsterdam


#http:
  # Uncomment this to add a password (recommended!)
  # api_password: !secret api_password
  # use_x_forwarded_for: True
  # Uncomment this if you are using SSL or running in Docker etc
  # base_url: example.duckdns.org:8123

#frontend:

# Checks for available updates
# Note: This component will send some information about your system to
# the developers to assist with development of Home Assistant.
# For more information, please see:
# https://home-assistant.io/blog/2016/10/25/explaining-the-updater/
#updater:
  # Optional, allows Home Assistant developers to focus on popular components.
  # include_used_components: true

# Discover some devices automatically
#discovery:

# Allows you to issue voice commands from the frontend in enabled browsers
#conversation:

# Enables support for tracking state changes over time.
#history:

# View all events in a logbook
#logbook:

# Track the sun
#sun:

# Weather Prediction
#sensor:
#  platform: yr
#

ffmpeg:


binary_sensor:
    - platform: rpi_gpio
      ports:
        25: frontdoor
      pull_mode: DOWN
      invert_logic: true
      bouncetime: 60
    - platform: rpi_gpio
      ports:
        21: doorbell
      pull_mode: DOWN
      invert_logic: false
      bouncetime: 300
   #- platform: ffmpeg_noise
   #  input: !secret noisedetector_input
   #  extra_arguments: -filter:a highpass=f=300,lowpass=f=2500,volume=volume=2 -codec:a libmp3lame -ar 16000
   #  output: !secret noisedetector_output
   #  initial_state: false
   #  duration: 2
   #  reset: 60
   #  peak: -32



switch:
    platform: command_line
    switches:
        kodi:
            command_on: "aplay /home/homeautomation/homeassistant/media/computerbeep_5.wav; killall kodi kodi-standalone kodi.bin_v8; kodi-standalone &"
            command_off: "killall kodi kodi-standalone kodi.bin_v8; aplay /home/homeautomation/homeassistant/media/computerbeep_9.wav"
            command_state: "ps aux | grep kodi | grep -v grep"
        xorg:
            command_on: "aplay /home/homeautomation/homeassistant/media/computerbeep_5.wav; sudo systemctl start lightdm"
            command_off: "sudo systemctl stop lightdm; aplay /home/homeautomation/homeassistant/media/computerbeep_9.wav"
            command_state: "ps aux | grep lightdm | grep -v grep"
        musicplayer:
            command_on: "killall snapclient; aplay /home/homeautomation/homeassistant/media/computerbeep_5.wav; snapclient -s sysdefault -h mediaserver.anaproy.lxd >/dev/null 2>/dev/null &"
            command_off: "killall snapclient; aplay /home/homeautomation/homeassistant/media/computerbeep_9.wav"
            command_state: "ps aux | grep snapclient | grep -v grep"
            #command_on: "killall mplayer; aplay /home/homeautomation/homeassistant/media/computerbeep_5.wav; mplayer -ao alsa:device=hw=0.0 http://anaproy.nl:8000/stream.mp3 >/dev/null 2>/dev/null &" # hw=0.0 is not a typo, it's what mplayer expects for hw:0,0
       #noisedetector:
       #    command_on: "avconv -f alsa -i hw:1,0 -vn -f rtp rtp://236.0.0.1:2000 &"
       #    command_off: "killall avconv"
       #    command_state: "ps aux | grep avconv | grep -v grep"

######### SENSOR PROPAGATION SLAVE->MASTER (MQTT) #########
automation:
  - id: s2m_frontdoor
    alias: s2m_frontdoor
    trigger:
        - platform: state
          entity_id: binary_sensor.frontdoor
        - platform: homeassistant
          event: start
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data_template:
            topic: "home/binary_sensor/frontdoor"
            payload: "{{ states('binary_sensor.frontdoor') | upper }}"
  - id: s2m_doorbell
    alias: s2m_doorbell
    trigger:
        - platform: state
          entity_id: binary_sensor.doorbell
        - platform: homeassistant
          event: start
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data_template:
            topic: "home/binary_sensor/doorbell"
            payload: "{{ states('binary_sensor.doorbell') | upper }}"
  - id: s2m_kodi
    alias: s2m_kodi
    trigger:
        - platform: state
          entity_id: switch.kodi
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data_template:
            topic: "home/kodi/get/pi1"
            payload: "{{ states('switch.kodi') | upper }}"
  - id: s2m_xorg
    alias: s2m_xorg
    trigger:
        - platform: state
          entity_id: switch.xorg
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data_template:
            topic: "home/xorg/get/pi1"
            payload: "{{ states('switch.xorg') | upper }}"
  - id: m2s_kodi_on
    alias: m2s_kodi_on
    trigger:
        platform: mqtt
        topic: "home/kodi/set/pi1"
        payload: 'ON'
    action:
        service_template: switch.turn_on
        entity_id: switch.kodi
  - id: m2s_kodi_off
    alias: m2s_kodi_off
    trigger:
        platform: mqtt
        topic: "home/kodi/set/pi1"
        payload: 'OFF'
    action:
        service_template: switch.turn_off
        entity_id: switch.kodi
  - id: m2s_xorg_on
    alias: m2s_xorg_on
    trigger:
        platform: mqtt
        topic: "home/xorg/set/pi1"
        payload: 'ON'
    action:
        service_template: switch.turn_on
        entity_id: switch.xorg
  - id: m2s_xorg_off
    alias: m2s_xorg_off
    trigger:
        platform: mqtt
        topic: "home/xorg/set/pi1"
        payload: 'OFF'
    action:
        service_template: switch.turn_off
        entity_id: switch.xorg
  - id: s2m_musicplayer
    alias: s2m_musicplayer
    trigger:
        - platform: state
          entity_id: switch.musicplayer
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data_template:
            topic: "home/musicplayer/get/pi1"
            payload: "{{ states('switch.musicplayer') | upper }}"
  - id: m2s_musicplayer_on
    alias: m2s_musicplayer_on
    trigger:
        platform: mqtt
        topic: "home/musicplayer/set/pi1"
        payload: 'ON'
    action:
        service_template: switch.turn_on
        entity_id: switch.musicplayer
  - id: m2s_musicplayer_off
    alias: m2s_musicplayer_off
    trigger:
        platform: mqtt
        topic: "home/musicplayer/set/pi1"
        payload: 'OFF'
    action:
        service_template: switch.turn_off
        entity_id: switch.musicplayer
  - id: m2s_say
    alias: m2s_say
    trigger:
        platform: mqtt
        topic: "home/say/pi1"
    action:
      - service: tts.picotts_say
        entity_id: media_player.speaker
        data_template:
            message: '{{ trigger.payload }}'
    #- id: m2s_soundoutput_speakers
    #  alias: m2s_soundoutput_speakers
    #  trigger:
    #      platform: mqtt
    #      topic: "home/soundoutput/pi1"
    #      payload: 'speakers'
    #  action:
    #      service: shell_command.soundoutput
    #      data:
    #          outputid: '1'
    #- id: m2s_soundoutput_hdmi
    #  alias: m2s_soundoutput_hdmi
    #  trigger:
    #      platform: mqtt
    #      topic: "home/soundoutput/pi1"
    #      payload: 'hdmi'
    #  action:
    #      service: shell_command.soundoutput
    #      data:
    #          outputid: '2'
  - id: m2s_noisedetector_on
    alias: m2s_noisedetector_on
    trigger:
        platform: mqtt
        topic: "home/noisedetector/set/pi1"
        payload: 'ON'
    action:
      - service: mqtt.publish
        data:
            topic: "home/say/pi1"
            payload: "Remote listening started"
      - service: switch.turn_on
        entity_id: switch.noisedetector
      - service: ffmpeg.start
        entity_id: binary_sensor.noisedetector
  - id: m2s_noisedetector_off
    alias: m2s_noisedetector_off
    trigger:
        platform: mqtt
        topic: "home/noisedetector/set/pi1"
        payload: 'OFF'
    action:
      - service: ffmpeg.stop
        entity_id: binary_sensor.noisedetector
      - service: switch.turn_off
        entity_id: switch.noisedetector
      - service: mqtt.publish
        data:
            topic: "home/say/pi1"
            payload: "Remote listening stopped"
  - id: s2m_noisedetector_sensor
    alias: s2m_noisedetector_sensor
    trigger:
        - platform: state
          entity_id: binary_sensor.noisedetector
        - platform: homeassistant
          event: start
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data_template:
            topic: "home/binary_sensor/noise"
            payload: "{{ states('binary_sensor.noisedetector') | upper }}"
  - id: s2m_noisedetector
    alias: s2m_noisedetector
    trigger:
        - platform: state
          entity_id: switch.noisedetector
        - platform: mqtt
          topic: home/poll #an explicit re-poll of states, issued by master when it starts
    action:
        service: mqtt.publish
        data_template:
            topic: "home/noisedetector/get/pi1"
            payload: "{{ states('switch.noisedetector') | upper }}"
  - id: m2s_play_media
    alias: m2s_play_media
    trigger:
        platform: mqtt
        topic: "home/sound/pi1"
    action:
        - service: media_player.play_media
          data_template:
              entity_id: media_player.speaker
              media_content_id: "/home/homeautomation/homeassistant/media/{{ trigger.payload }}"
              media_content_type: 'music'




######### SWITCH PROPAGATION SLAVE->MASTER and MASTER->SLAVE (MQTT) #########
  - id: ir_send
    alias: IR Send
    trigger:
        platform: mqtt
        topic: "home/ir_send/pi1"
    action:
        service: shell_command.ir_send
        data_template:
            device: '{{ trigger.payload_json.device }}'
            key: '{{ trigger.payload_json.key }}'
  - id: 433send
    alias: 433send
    trigger:
        platform: mqtt
        topic: "home/433send/set/pi1/#"
    action:
        - service: shell_command.433send
          data_template:
             protocol: '{{ trigger.topic.split("/")[-3] }}'
             group: '{{ trigger.topic.split("/")[-2] }}'
             unit: '{{ trigger.topic.split("/")[-1] }}'
             state: '{{ trigger.payload|lower }}'
        - service: mqtt.publish
          data_template:
              topic: "home/433send/get/{{ trigger.topic.split('/')[-3] }}/{{ trigger.topic.split('/')[-2] }}/{{ trigger.topic.split('/')[-1] }}"
              payload: '{{ trigger.payload }}'
  - id: hdmi_cec_send
    alias: HDMI CEC Send
    trigger:
        platform: mqtt
        topic: "home/hdmi_cec_send/pi1"
    action:
        service: shell_command.hdmi_cec_send
        data_template:
            payload: '{{ trigger.payload }}'


media_player speaker:
    - platform: vlc
      name: speaker
      arguments: '--alsa-audio-device=hw:2,0'

shell_command:
    start_pycec: python -m pycec
    ir_send: /home/homeautomation/homeassistant/scripts/media/irsend.sh "{{ device }}" "{{ key }}"
    433send: /home/homeautomation/homeassistant/scripts/switch/433send.sh 7 "{{ protocol }}" "{{ group }}" "{{ unit }}" "{{ state }}"
    hdmi_cec_send: /home/homeautomation/homeassistant/scripts/media/hdmicecsend.sh "{{ payload }}"
    #soundoutput: sudo amixer cset numid=3 "{{ outputid }}"



tts:
  platform: picotts
  language: 'en-GB'

#MQTT
mqtt:
    broker: 192.168.0.1
    port: 8883
    certificate: /etc/ssl/certs/ca-certificates.crt
    tls_insecure: true #allow non-matching hostnames
    tls_version: '1.2'
    client_id: pi1
    keepalive: 60
    username: homeassistant
    password: !secret api_password

#mqtt_eventstream:
#  publish_topic: slaves/pi1
#  subscribe_topic: master
